os:
 - osx
 - linux

sudo: false

branches:
  only:
    - master

install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install md5sha1sum; fi
  - source devtools/travis-ci/install_miniconda.sh
  - conda config --add channels omnia
  # Unpack encrypted OpenEye license file
  - if [ "$TRAVIS_SECURE_ENV_VARS" == true ]; then openssl aes-256-cbc -K $encrypted_348f443ff0b5_key -iv $encrypted_348f443ff0b5_iv -in "devtools/travis-ci/oe_license.txt.enc" -out "$OE_LICENSE" -d; fi
  - if [ "$TRAVIS_SECURE_ENV_VARS" == false ]; then echo "OpenEye license will not be installed in forks."; fi

script:
  conda build --quiet devtools/conda-recipe
  && devtools/travis-ci/build_docs.sh

script:
  # Create a test environment
  - conda create --yes -n test python=$python
  # Activate the test environment
  - source activate test
  # Add org channel
  - conda config --add channels ${ORGNAME}
  # Add omnia dev channels
  - conda config --add channels https://conda.anaconda.org/omnia/label/dev
  # Install OpenEye toolkit
  - conda install --yes --quiet pip
  - pip install $OPENEYE_CHANNEL openeye-toolkits && python -c "import openeye; print(openeye.__version__)"
  # Build the recipe
  - conda build devtools/conda-recipe
  # Install the package
  - conda install --yes --use-local ${PACKAGENAME}-dev
  # Install testing dependencies
  - conda install --yes --quiet nose nose-timer
  # Test the package
  - cd devtools && nosetests $PACKAGENAME --nocapture --verbosity=2 --with-timer -s -a 'temp' && cd ..

env:
  matrix:
    - python=2.7  CONDA_PY=27
    - python=3.4  CONDA_PY=34
    - python=3.5  CONDA_PY=35

  global:
    - ORGNAME="omnia"
    - PACKAGENAME="yank"
    # OpenEye toolkit
    # The architecture to download for the OpenEye toolkits
    - OE_ARCH="linux-x64"
    - OE_LICENSE="$HOME/oe_license.txt"
    - OPENEYE_CHANNEL="-i https://pypi.anaconda.org/OpenEye/simple/"
    # encrypted BINSTAR_TOKEN for push of dev package to binstar
    - secure: "iGrY1Jrr6ZvxtvjnTBVLFIPQBaalzkZX+DJWFZuk6j8igjDrlEVE2iGmpx5Akb7/H5/rRPI1GcnYy0e2OXSVHyxwcn2I6TXia3g6K95yxH43xOaTEfiFGfxSgP6M5OZSJjlLUmv3cpnJ66r6kYjQgTn9djY2iLsGKkFdR8pn6gQ="
    # encrypted AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    - secure: "SrSd1JoI8dBXQxDAX0xBTYBinTusRBQoPETnxHrBAgKdoty1pkzaghTKNMsrGsk78iwkkj1hAyttIY9trdFQkmx+OTx0fLKFmDHsMkgko4RzTtrgLgoxuRIs/gruID2cN1XKEbxlhRmQF14+q8/X1q6iGGdYMrxo51JcYPuEOSo="
    - secure: "br6QRMYXhHltYTEh/d+zejxcunT3GsqwQvxxLmqnLxi+LIxX4j7eymR6p4fPBd5mCRxyvkQEjnSZxF6e7JlEKxWVcMG28I/dBWzVIRW3EKQQNRmyI+JL1dfNaqj68kHJD+FknBwHK9LD238JPcyqXPdVrm9iPkDijPczvPBxvDs="

after_success:
  - echo "after_success"
  - if [ "$TRAVIS_SECURE_ENV_VARS" == true ]; then ./devtools/travis-ci/after_success.sh; fi
